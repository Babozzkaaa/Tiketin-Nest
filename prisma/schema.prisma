// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CarriageType {
  ECONOMY
  BUSINESS
  EXECUTIVE
  FIRST_CLASS
}

enum TrainType {
  PASSENGER
  FREIGHT
  HIGH_SPEED
  CARGO
  BULK
  INTERCITY
  HIGH_SPEED_CARGO
  METRO
}
model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255)
  phone_number String  @db.VarChar(20)
  role         Role    @default(USER)

  tickets     Ticket[]

  @@map("users")
}

model Station {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(100)
  code   String @unique @db.VarChar(10)
  city   String @db.VarChar(100)
  address String @db.VarChar(255)

  departures Schedule[] @relation("DepartureStation")
  arrivals   Schedule[] @relation("ArrivalStation")

  @@map("stations")
}

model Train {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  code         String     @unique @db.VarChar(20)
  train_type   TrainType  @default(PASSENGER)
  capacity     Int        @default(0)
  carriages    Carriage[]
  schedules    Schedule[]

  @@map("trains")
}

model Carriage {
  id              Int          @id @default(autoincrement())
  train_id        Int
  carriage_number Int
  carriage_type   CarriageType @default(ECONOMY)
  seat_capacity   Int
  price           Decimal      @db.Decimal(10,2) @default(0.00)

  train           Train        @relation(fields: [train_id], references: [id])
  seats           Seat[]

  @@map("carriages")
}

model Seat {
  id          Int       @id @default(autoincrement())
  carriage_id Int
  seat_number String    @db.VarChar(10)

  carriage    Carriage  @relation(fields: [carriage_id], references: [id])
  tickets     Ticket[]

  @@map("seats")
}

model Schedule {
  id                    Int      @id @default(autoincrement())
  train_id              Int
  departure_station_id  Int
  arrival_station_id    Int
  departure_time        DateTime
  arrival_time          DateTime
  date                  DateTime

  train                 Train    @relation(fields: [train_id], references: [id])
  departure_station     Station  @relation("DepartureStation", fields: [departure_station_id], references: [id])
  arrival_station       Station  @relation("ArrivalStation", fields: [arrival_station_id], references: [id])
  tickets               Ticket[]

  @@map("schedules")
}

model Ticket {
  id               Int       @id @default(autoincrement())
  user_id          Int
  schedule_id      Int
  seat_id          Int
  booking_reference String   @db.VarChar(100)
  passenger_name   String    @db.VarChar(100)
  passenger_id_num String    @db.VarChar(50)
  passenger_email  String?   @db.VarChar(100)
  passenger_phone  String?   @db.VarChar(20)
  status           String    @default("booked") // booked, paid, canceled

  user             User      @relation(fields: [user_id], references: [id])
  schedule         Schedule  @relation(fields: [schedule_id], references: [id])
  seat             Seat      @relation(fields: [seat_id], references: [id])

  @@map("tickets")
}

model Payment {
  id                Int      @id @default(autoincrement())
  booking_reference String   @db.VarChar(100)
  payment_method    String   @db.VarChar(50)
  payment_status    String   @db.VarChar(20) // pending, success, failed
  payment_date      DateTime
  amount            Decimal  @db.Decimal(10,2)
  xendit_invoice_id String?  @db.VarChar(100)
  xendit_payment_id String?  @db.VarChar(100)
  payment_url       String?  @db.VarChar(500)


  @@map("payments")
}